{
    "openapi": "3.0.0",
    "info": {
        "version": "1.0.0",
        "title": "viewcrypt API",
        "description": "An API to simply run the smart viewcrypt encoding algorithm on any kind of digital content.",
        "contact": {
            "email": "viewcrypt@8qfx1ai5.de",
            "name": "Felix Ohnesorge",
            "url": "https://8qfx1ai5.de"
        },
        "termsOfService": "/api/terms_of_service"
    },
    "servers": [
        {
            "url": "/api"
        }
    ],
    "paths": {
        "/encode/html": {
            "post": {
                "description": "Post HTML text like multiple 'p', 'div', 'section' tags or plain text. The fraction will be encoded. This encoding is maybe dirty, because of the content must be 'repaired' in the first step to be processable. If you get unexpected output, try XHTML fractions instead.",
                "summary": "Encode the text nodes of a HTML fraction.",
                "operationId": "encodehtml",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "payload"
                                ],
                                "properties": {
                                    "payload": {
                                        "type": "string",
                                        "description": "the HTML fragment with text to encode",
                                        "example": "<h2>Hello World!</h2><p>Nice to see you.</p>",
                                        "minLength": 1
                                    },
                                    "css": {
                                        "type": "string",
                                        "description": "a css class added to the top level nodes",
                                        "example": "my-special-css-class-name",
                                        "default": "",
                                        "maxLength": 50
                                    },
                                    "from": {
                                        "type": "string",
                                        "description": "a set of all characters, which should be changed in content",
                                        "example": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
                                        "default": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
                                    },
                                    "to": {
                                        "type": "string",
                                        "description": "a set of the resulting characters, in the same order like in the from property",
                                        "example": "BCDEFGHIJKLMNOPQRSTUVWXYZAbcdefghijklmnopqrstuvwxyza1234567890",
                                        "default": "BCDEFGHIJKLMNOPQRSTUVWXYZAbcdefghijklmnopqrstuvwxyza"
                                    }
                                }
                            },
                            "examples": {
                                "simple_p_tag": {
                                    "value": {
                                        "content": "<p>fldsjdjf</p>",
                                        "css": "vc",
                                        "from": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
                                        "to": "aFMkZVwKEWsjUQdgYfuIpNGSDnyxPehiLTRbCoqvXmAzBcrltHJO"
                                    }
                                }
                            }
                        }
                    },
                    "description": "Body example"
                },
                "responses": {
                    "200": {
                        "description": "HTML encoding was sucessfull and the results are returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_Encode"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Encoding aborded, because of invalid request information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error, nobody knows what was happening yet.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/5xx"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "encode"
                ]
            }
        },
        "/encode/text": {
            "post": {
                "description": "Post a text, keys and a css class and get an encoded text.",
                "summary": "Encode the text and all characters",
                "operationId": "encodetext",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "payload"
                                ],
                                "properties": {
                                    "payload": {
                                        "type": "string",
                                        "description": "the text to encode",
                                        "example": "Hello World!\n\nNice to see you.",
                                        "default": "",
                                        "minLength": 1
                                    },
                                    "from": {
                                        "type": "string",
                                        "description": "a set of all characters, which should be changed in content",
                                        "example": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
                                        "default": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
                                    },
                                    "to": {
                                        "type": "string",
                                        "description": "a set of the resulting characters, in the same order like in the from property",
                                        "example": "BCDEFGHIJKLMNOPQRSTUVWXYZAbcdefghijklmnopqrstuvwxyza1234567890",
                                        "default": "BCDEFGHIJKLMNOPQRSTUVWXYZAbcdefghijklmnopqrstuvwxyza"
                                    }
                                }
                            },
                            "examples": {
                                "simple_text": {
                                    "value": {
                                        "content": "Hello World!",
                                        "from": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
                                        "to": "aFMkZVwKEWsjUQdgYfuIpNGSDnyxPehiLTRbCoqvXmAzBcrltHJO"
                                    }
                                }
                            }
                        }
                    },
                    "description": "Body example"
                },
                "responses": {
                    "200": {
                        "description": "Return the encoded text",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_Encode"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Encoding aborded, because of invalid request information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error, nobody knows what was happening yet.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/5xx"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "encode"
                ]
            }
        },
        "/key": {
            "post": {
                "description": "Create and get a new key to use in the encoding steps.",
                "summary": "Create a new random key to use for the encoding",
                "operationId": "createkey",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "regex": {
                                        "type": "string",
                                        "description": "a selector for the contained characters",
                                        "example": "[abcde0-9&§]",
                                        "default": "[A-Za-z0-9]",
                                        "maxLength": 200
                                    }
                                }
                            },
                            "examples": {
                                "onlycharacters": {
                                    "value": {
                                        "regex": "[A-Za-z]"
                                    }
                                },
                                "subsets": {
                                    "value": {
                                        "regex": "[A-Z][a-z]"
                                    }
                                }
                            }
                        }
                    },
                    "description": "Body example"
                },
                "responses": {
                    "200": {
                        "description": "New key created sucessfully. Response contains the key information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": [
                                        "from",
                                        "to"
                                    ],
                                    "properties": {
                                        "from": {
                                            "type": "string",
                                            "example": "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                        },
                                        "to": {
                                            "type": "string",
                                            "example": "MNOPQRSTUVWXYZABCDEFGHIJKL"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Key creation aborded, because of invalid request information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error, nobody knows what was happening yet.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/5xx"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "key"
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "200_Encode": {
                "type": "object",
                "required": [
                    "payload"
                ],
                "properties": {
                    "payload": {
                        "type": "string",
                        "example": "That is an Example."
                    }
                }
            },
            "400": {
                "type": "object",
                "required": [
                    "pname",
                    "hint"
                ],
                "properties": {
                    "pname": {
                        "type": "string",
                        "example": "regex",
                        "description": "the name of the invalid parameter"
                    },
                    "hint": {
                        "type": "string",
                        "example": "do not use values bigger than x",
                        "description": "some help for the developer to fix the issue"
                    }
                }
            },
            "5xx": {
                "type": "object",
                "required": [
                    "hint"
                ],
                "properties": {
                    "hint": {
                        "type": "string",
                        "example": "Upps... We can do better than 500",
                        "description": "Not your fault. We will fix that asap."
                    }
                }
            }
        }
    }
}