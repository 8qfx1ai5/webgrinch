{
    "openapi": "3.0.0",
    "info": {
        "version": "1.0.0",
        "title": "viewcrypt API"
    },
    "servers": [
        {
            "url": "/api"
        }
    ],
    "paths": {
        "/encode/html": {
            "post": {
                "summary": "Encode the text nodes of a HTML fraction.",
                "operationId": "encodehtml",
                "tags": [
                    "encode"
                ],
                "responses": {
                    "200": {
                        "description": "Return the encoded text",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Encode"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Parameter invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/406"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/5xx"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "content"
                                ],
                                "properties": {
                                    "payload": {
                                        "type": "string",
                                        "description": "the HTML fragment with text to encode",
                                        "example": "<h2>Hello World!</h2><p>Nice to see you.</p>",
                                        "default": ""
                                    },
                                    "css": {
                                        "type": "string",
                                        "description": "a css class added to the top level nodes",
                                        "example": "my-special-css-class-name",
                                        "default": ""
                                    },
                                    "from": {
                                        "type": "string",
                                        "description": "a set of all characters, which should be changed in content",
                                        "example": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
                                        "default": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
                                    },
                                    "to": {
                                        "type": "string",
                                        "description": "a set of the resulting characters, in the same order like in the from property",
                                        "example": "BCDEFGHIJKLMNOPQRSTUVWXYZAbcdefghijklmnopqrstuvwxyza1234567890",
                                        "default": "BCDEFGHIJKLMNOPQRSTUVWXYZAbcdefghijklmnopqrstuvwxyza"
                                    }
                                }
                            },
                            "examples": {
                                "simple p tag": {
                                    "value": {
                                        "content": "<p>fldsjdjf</p>",
                                        "css": "vc",
                                        "from": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
                                        "to": "aFMkZVwKEWsjUQdgYfuIpNGSDnyxPehiLTRbCoqvXmAzBcrltHJO"
                                    }
                                }
                            }
                        }
                    },
                    "description": "Body example"
                },
                "description": "Post HTML text like multiple 'p', 'div', 'section' tags or plain text. The fraction will be encoded. This encoding is maybe dirty, because of the content must be 'repaired' in the first step to be processable. If you get unexpected output, try XHTML fractions instead."
            }
        },
        "/encode/text": {
            "post": {
                "summary": "Encode the text and all characters",
                "operationId": "encodetext",
                "tags": [
                    "encode"
                ],
                "responses": {
                    "200": {
                        "description": "Return the encoded text",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Encode"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Parameter invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/406"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/5xx"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "payload"
                                ],
                                "properties": {
                                    "payload": {
                                        "type": "string",
                                        "description": "the text to encode"
                                    },
                                    "from": {
                                        "type": "string",
                                        "description": "a set of all characters, which should be changed in content"
                                    },
                                    "to": {
                                        "type": "string",
                                        "description": "a set of the resulting characters, in the same order like in the from property"
                                    }
                                }
                            },
                            "examples": {
                                "simple text": {
                                    "value": {
                                        "content": "Hello World!",
                                        "from": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
                                        "to": "aFMkZVwKEWsjUQdgYfuIpNGSDnyxPehiLTRbCoqvXmAzBcrltHJO"
                                    }
                                }
                            }
                        }
                    },
                    "description": "Body example"
                },
                "description": "Post a text, keys and a css class and get an encoded text."
            }
        },
        "/key": {
            "post": {
                "summary": "Create a new random key to use for the encoding",
                "operationId": "createkey",
                "tags": [
                    "key"
                ],
                "responses": {
                    "200": {
                        "description": "Return the new key",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Key"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Parameter invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/406"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/5xx"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "regex": {
                                        "type": "string",
                                        "description": "a selector for the contained characters",
                                        "example": "[abcde0-9&§]",
                                        "default": "[A-Za-z0-9]"
                                    }
                                }
                            },
                            "examples": {
                                "onlycharacters": {
                                    "value": {
                                        "regex": "[A-Za-z]"
                                    }
                                },
                                "subsets": {
                                    "value": {
                                        "regex": "[A-Z][a-z]"
                                    }
                                }
                            }
                        }
                    },
                    "description": "Body example"
                },
                "description": "Create and get a new key to use in the encoding steps."
            }
        }
    },
    "components": {
        "schemas": {
            "Encode": {
                "type": "object",
                "required": [
                    "payload"
                ],
                "properties": {
                    "payload": {
                        "type": "string",
                        "example": "That is an Example."
                    }
                }
            },
            "Key": {
                "type": "object",
                "required": [
                    "from",
                    "to"
                ],
                "properties": {
                    "from": {
                        "type": "string",
                        "example": "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                    },
                    "to": {
                        "type": "string",
                        "example": "MNOPQRSTUVWXYZABCDEFGHIJKL"
                    }
                }
            },
            "406": {
                "type": "object",
                "required": [
                    "pname",
                    "hint"
                ],
                "properties": {
                    "pname": {
                        "type": "string",
                        "example": "regex",
                        "description": "the name of the invalid parameter"
                    },
                    "hint": {
                        "type": "string",
                        "example": "do not use values bigger than x",
                        "description": "some help for the developer to fix the issue"
                    }
                }
            },
            "5xx": {
                "type": "object",
                "required": [
                    "hint"
                ],
                "properties": {
                    "hint": {
                        "type": "string",
                        "example": "Upps... We can do better than 500",
                        "description": "Not your fault. We will fix that asap."
                    }
                }
            }
        }
    }
}